/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/ext_power.h>

&led_strip {
        chain-length = <27>;
};

&caps_word {
        continue-list = <UNDERSCORE BACKSPACE DELETE SEMI>;
};

/ {
        behaviors {
                ctrl_l3: tap_dance_ctrl_l3 {
                        compatible = "zmk,behavior-tap-dance";
                        #binding-cells = <0>;
                        bindings = <&sk LCTRL>, <&mo 3>;
                };
        };

        keymap {
                compatible = "zmk,keymap";

                default_layer {
// -----------------------------------------------------------------------------------------
// | ESC  |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U  |  I  |  O  |  P  |  \  |
// | CAPS |  A  |  S  |  D  |  F  |  G  |   |  H  |  J  |  K  |  L  |  ;  |  '  |
// |  `   |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M  |  ,  |  .  |  /  |  -  |
//
//       | CTRL / L3 | BSPC / L1 | SHFT |   | RET / L1 | SPC / L2 | CTRL / L3 |
//
                        bindings = <
   &kp ESC      &kp Q &kp W &kp E &kp R &kp T   &kp Y &kp U  &kp I     &kp O   &kp P    &kp BSLH
   &kp CAPSLOCK &kp A &kp S &kp D &kp F &kp G   &kp H &kp J  &kp K     &kp L   &kp SEMI &kp SQT
   &kp GRAVE    &kp Z &kp X &kp C &kp V &kp B   &kp N &kp M  &kp COMMA &kp DOT &kp FSLH &kp MINUS
                &ctrl_l3 &lt 1 BSPC &sk LSHFT   &lt 1 RET &lt 2 SPACE &ctrl_l3
                        >;
                };

                lower_layer {
// -----------------------------------------------------------------------------------------
// |           |  ^  |  [  |  (   |  {   |  %  |   |  *  |  7  |  8  |  9  |  /  | BSPC |
// | CAPS_WORD | GUI | ALT | CTRL | SHFT |  =  |   |  +  |  4  |  5  |  6  |  -  |  <   |
// |           |  $  |  ]  |  )   |  }   |  ~  |   |  0  |  1  |  2  |  3  |  .  |  >   |
//
//       | CTRL / L3 | BSPC / L1 | SHFT |   | RET / L1 | SPC / L2 | CTRL / L3 |
//
                        bindings = <
   &trans     &kp CARET &kp LBKT &kp LPAR  &kp LBRC  &kp PRCNT   &kp KP_MULTIPLY &kp N7 &kp N8 &kp N9 &kp KP_DIVIDE &kp BSPC
   &caps_word &sk LGUI  &sk LALT &sk LCTRL &sk LSHFT &kp EQUAL   &kp KP_PLUS     &kp N4 &kp N5 &kp N6 &kp KP_MINUS  &kp LT
   &trans     &kp DLLR  &kp RBKT &kp RPAR  &kp RBRC  &kp TILDE   &kp N0          &kp N1 &kp N2 &kp N3 &kp KP_DOT    &kp GT
                                          &trans &trans &trans   &trans &trans &trans
                        >;
                };

                raise_layer {
// -----------------------------------------------------------------------------------------
// | F11 | F1  | F2  |  F3  |  F4  | F5  |   | PASTE | REPEAT | ESC   |  TAB  |  DEL  | BSPC |
// | F12 | GUI | ALT | CTRL | SHFT | INS |   | COPY  |  LEFT  | DOWN  |  UP   | RIGHT | UNDO |
// |     | F6  | F7  |  F8  |  F9  | F10 |   |  CUT  |  HOME  | PG_DN | PG_UP |  END  | REDO |
//
//       | CTRL / L3 | BSPC / L1 | SHFT |   | RET / L1 | SPC / L2 | CTRL / L3 |
//
                        bindings = <
   &kp F11 &kp F1   &kp F2   &kp F3    &kp F4    &kp F5    &kp LG(V) &key_repeat &kp ESC   &kp TAB   &kp DEL   &kp BSPC
   &kp F12 &sk LGUI &sk LALT &sk LCTRL &sk LSHFT &kp INS   &kp LG(C) &kp LEFT    &kp DOWN  &kp UP    &kp RIGHT &kp LG(Z)
   &trans  &kp F6   &kp F7   &kp F8    &kp F9    &kp F10   &kp LG(X) &kp HOME    &kp PG_DN &kp PG_UP &kp END   &kp LG(LS(Z))
                                    &trans &trans &trans   &trans &trans &trans
                        >;
                };

                magic_layer {
// -----------------------------------------------------------------------------------------
// | BOOT_LDR | RGB_NEXT | RGB_SP+ | RGB_HUI | RGB_SAI | RGB_BRI |   |        | BGT- | MUTE | BGT+ |      | BOOT_LDR |
// | RGB_TOG  | RGB_PREV | RGB_SP- | RGB_HUD | RGB_SAD | RGB_BRD |   |   <<   | VOL- |  PP  | VOL+ |  >>  |          |
// | OUT_TOG  |   BT1    |   BT2   |   BT3   |   BT4   |   BT5   |   | BT_CLR |      |      |      |      | OUT_TOG  |
//
//                                | CTRL / L3 | BSPC / L1 | SHFT |   | RET / L1 | SPC / L2 | CTRL / L3 |
//
                        bindings = <
   &bootloader     &rgb_ug RGB_EFF &rgb_ug RGB_SPI &rgb_ug RGB_HUI &rgb_ug RGB_SAI &rgb_ug RGB_BRI   &none      &kp C_BRI_DN &kp C_MUTE &kp C_BRI_UP &none      &bootloader
   &rgb_ug RGB_TOG &rgb_ug RGB_EFR &rgb_ug RGB_SPD &rgb_ug RGB_HUD &rgb_ug RGB_SAD &rgb_ug RGB_BRD   &kp C_PREV &kp C_VOL_DN &kp C_PP   &kp C_VOL_UP &kp C_NEXT &none
   &out OUT_TOG    &bt BT_SEL 0    &bt BT_SEL 1    &bt BT_SEL 2    &bt BT_SEL 3    &bt BT_SEL 4      &bt BT_CLR &none        &none      &none        &none      &out OUT_TOG
                                                                              &trans &trans &trans   &trans &trans &trans
                        >;
                };
        };
};
